from timeit import timeit




f1="""
from heapq import heapify, heappop, heappush
from random import randint
def findKthSmallest(nums, k: int) -> int:
    l=[-num for num in nums[:k]]
    
    heapify(l)  # heapify the first k elements
    
    for i in range(k,len(nums)):
        if nums[i] < (-l[0]):
            # replace the biggest element in the heap with the current element
            heappop(l)
            heappush(l,-nums[i])

    return -l[0]
testList=[randint(0,10000) for i in range(10000)]
findKthSmallest(testList,5000)
    """
f2="""
from random import randint

def randomSelect(nums, l, r, k):
    p = randint(l, r)  # random select a number between l and r
    # swap the selected number with the last number
    nums[r], nums[p] = nums[p], nums[r]
    # the following is the same as quick select
    i = j = l
    while j < r:
        if nums[r] >= nums[j]:
            nums[i], nums[j] = nums[j], nums[i]  # swap
            i += 1

        j += 1

    nums[i], nums[r] = nums[r], nums[i]  # swap

    if i < r-k+1:
        return randomSelect(nums, i+1, r, k)
    elif i > r-k+1:
        return randomSelect(nums, l, i-1, k-r+i-1)
    else:
        return nums[i]

def findKthSmallest(nums, k: int) -> int:
    n=len(nums)
    return randomSelect(nums, 0, n-1, n-k+1)

testList=[randint(0,10000) for i in range(10000)]
findKthSmallest(testList,5000)
"""


f3="""
from random import randint
def partition(arr, p, r, k):
    i = p+1
    j = r
    x = k

    while True:
        while arr[i] < x and i < r:
            i += 1
        while arr[j] >= x and j > p:
            j -= 1
        if i >= j:
            break
        arr[i], arr[j] = arr[j], arr[i]

    pos = arr.index(x)
    arr[pos] = arr[j]
    arr[j] = x

    return j


def select(arr, p, r, k):
    if(r-p < 75):
        arr[p:r+1] = sorted(arr[p:r+1])
        return arr[p+k-1]

    for i in range(0, int((r-p-4)/5+1)):
        # sort 5 elements, for get the median
        arr[p+5*i:p+5*i+4+1] = sorted(arr[p+5*i:p+5*i+4+1])

        # swap the median to the first position, for better getting the median of medians
        arr[p+i], arr[p+5*i+2] = arr[p+5*i+2], arr[p+i]
        x = select(arr, p, int(p+(r-p-4)/5), int((r-p-4)/10))
        i = partition(arr, p, r, x)    # partition the array
        j = i-p+1

        if(k <= j):
            return select(arr, p, i, k)
        else:
            return select(arr, i+1, r, k-j)


def findKthSmallest(arr, k: int):
    kthNum = select(arr, 0, len(arr)-1, k)
    nums = [num for num in arr if num <= kthNum]
    nums.sort()
    return nums[:k]
testList=[randint(0,10000) for i in range(10000)]
findKthSmallest(testList,5000)
"""
t1=timeit(f1,number=100)
print(t1*1000)
t2=timeit(f2,number=100)
print(t2*1000)
t3=timeit(f3,number=100)
print(t3*1000)